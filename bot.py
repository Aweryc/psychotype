import time
import os
from apscheduler.schedulers.background import BackgroundScheduler

import numpy as np
import gspread

from additional_functions import clean_users
from combinatios import *
from config import tg_bot_token, google_sheet_link
from conn import create_connection

import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, InlineQueryResultArticle, Update, \
    InputTextMessageContent
from telegram.ext import (
    Updater,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
    ConversationHandler,
    InlineQueryHandler,
    CallbackContext, CommandHandler,
)
import logging

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

STEP_3 = 1
STEP_4 = 2
STEP_5 = 3
STEP_6 = 4
STEP_7 = 5
STEP_8 = 6

STEP_10 = 1
STEP_11 = 2
STEP_12 = 3
STEP_13 = 4
STEP_14 = 5
STEP_15 = 6
STEP_16 = 7
STEP_17 = 8
STEP_18 = 9
STEP_19 = 10
STEP_20 = 11
STEP_21 = 12
GET_SOCIAL_LINK = 13


def start(update: Update, context: CallbackContext):
    context.user_data.clear()

    reply_keys = [['–°—Ç–∞—Ä—Ç']]
    try:
        db = create_connection(sqlite3)
        cursor = db.cursor()
        sql = f"SELECT * FROM users_table WHERE chat_id = {update.message.chat.id}"
        cursor.execute(sql)
        result = cursor.fetchall()
        db.commit()
        db.close()
        if not result:
            update.message.reply_text(text=f"–ü—Ä–∏–≤–µ—Ç! –Ø –ü—Å–∏—Ö–æ–±–æ—Ç.\n\n"
                                           f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ <b>—Ç–µ—Å—Ç –Ω–∞ –ø—Å–∏—Ö–æ—Ç–∏–ø</b>.\n"
                                           f"–Ø –æ–ø—Ä–µ–¥–µ–ª—é —Ç–≤–æ–π –ø—Å–∏—Ö–æ—Ç–∏–ø –∏ —Ä–æ–ª—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å —Ç–≤–æ–∏–º–∏ –ª–∏—á–Ω—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏. "
                                           f"–¢–∞–∫–∂–µ —è –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å –∑–∞–≤–µ—Ç–Ω—ã—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π. \n\n"
                                           f"<i>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äú–°—Ç–∞—Ä—Ç‚Äù</i>",
                                      reply_markup=ReplyKeyboardMarkup(reply_keys,
                                                                       resize_keyboard=True,
                                                                       one_time_keyboard=True),
                                      parse_mode="HTML"
                                      )
        else:
            update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç.")

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error)

    return ConversationHandler.END


def name(update: Update, context: CallbackContext):
    try:
        db = create_connection(sqlite3)
        cursor = db.cursor()
        sql = f"SELECT * FROM users_table WHERE chat_id = {update.message.chat.id}"
        cursor.execute(sql)
        result = cursor.fetchall()
        db.commit()
        db.close()
        if not result:
            update.message.reply_text(
                f"–í –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —Ç–µ—Å—Ç–∞ —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: <i>–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏ —Ç.–¥.</i>\n\n"
                f"–í—Å–µ —ç—Ç–æ - —Ç–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –Ø –æ—á–µ–Ω—å —Ü–µ–Ω—é, —á—Ç–æ —Ç—ã –¥–æ–≤–µ—Ä–∏—à—å –∏—Ö –º–Ω–µ –∏ –æ–±—è–∑—É—é—Å—å –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n\n",
                parse_mode="HTML")

            update.message.reply_text(f"<i>–ù–∞—á–Ω–µ–º!</i>\n"
                                      f"–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ú–Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–º–µ–Ω–∏.\n"
                                      f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω</i>",
                                      parse_mode="HTML"
                                      )
            return STEP_3
        else:
            update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç.")
            return ConversationHandler.END

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error)


def age(update: Update, context: CallbackContext):
    context.user_data["name"] = update.message.text
    update.message.reply_text(f"<b>–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?</b>\n"
                              f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 25</i>",
                              parse_mode="HTML")
    return STEP_4


def city(update: Update, context: CallbackContext):
    context.user_data["age"] = update.message.text
    update.message.reply_text(f"<b>–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∂–∏–≤–µ—à—å?</b>\n"
                              f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</i>",
                              parse_mode="HTML")
    return STEP_5


def social_link(update: Update, context: CallbackContext):
    context.user_data["city"] = update.message.text
    answer_btns = [[InlineKeyboardButton(text='–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º', callback_data='–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º'),
                    InlineKeyboardButton(text='–§–µ–π—Å–±—É–∫', callback_data='–§–µ–π—Å–±—É–∫')],
                   [InlineKeyboardButton(text='–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏', callback_data='–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏'),
                    InlineKeyboardButton(text='–í–∫–æ–Ω—Ç–∞–∫—Ç–µ', callback_data='–í–∫–æ–Ω—Ç–∞–∫—Ç–µ')],
                   [InlineKeyboardButton(text='–ù–∏–∫–∞–∫–æ–π', callback_data='–ù–∏–∫–∞–∫–æ–π')]
                   ]
    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    update.message.reply_text(f"<b>–ö–∞–∫–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç—å—é —Ç—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ?</b>\n",
                              reply_markup=inline_keyboad,
                              parse_mode='HTML')
    return STEP_6


def real_income(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["social_net"] = query.data
    answer_btns = [
        [InlineKeyboardButton(text='–º–µ–Ω—å—à–µ 100 —Ç.—Ä', callback_data='–º–µ–Ω—å—à–µ 100.000 —Ä—É–±.')],
        [InlineKeyboardButton(text='101 —Ç.—Ä - 200 —Ç.—Ä', callback_data='101.000 - 200.000 —Ä—É–±.')],
        [InlineKeyboardButton(text='–ë–æ–ª—å—à–µ 200 —Ç.—Ä', callback_data='–ë–æ–ª—å—à–µ 200.000 —Ä—É–±.')],
        [InlineKeyboardButton(text='–ù–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å ü§≠', callback_data='–ù–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å')]
    ]
    inline_keyboad = InlineKeyboardMarkup(answer_btns)

    query.message.edit_text(f"<b>–ö–∞–∫–æ–π —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥(—Ä—É–±/–º–µ—Å)?</b>",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    query.answer()
    return STEP_7


def wish_income(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["current_income"] = query.data
    answer_btns = [[InlineKeyboardButton(text='–±–æ–ª—å—à–µ 100 —Ç.—Ä', callback_data='–±–æ–ª—å—à–µ 100.000 —Ä—É–±.')],
                   [InlineKeyboardButton(text='–±–æ–ª—å—à–µ 200 —Ç.—Ä', callback_data='–±–æ–ª—å—à–µ 200.000 —Ä—É–±.')],
                   ]
    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(f"<b>–ö–∞–∫–æ–π —Ç–≤–æ–π –∂–µ–ª–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ 1 –≥–æ–¥? </b>\n"
                            f"<i>–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –º–Ω–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.</i>",
                            reply_markup=inline_keyboad,
                            parse_mode="HTML"
                            )
    query.answer()
    return STEP_8


def test_start(update: Update, context: CallbackContext):
    reply_key = [["–ü–æ–µ—Ö–∞–ª–∏"]]
    mes_text = f"<b>–¢–µ–ø–µ—Ä—å –º—ã –ø–µ—Ä–µ–π–¥–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–µ—Å—Ç–∞.</b>\n\n" \
               f"–¢–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ 12 –±–ª–æ–∫–æ–≤. –í –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è 4 –∫–∞—á–µ—Å—Ç–≤–∞ –ª–∏—á–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏ —Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è.\n\n" \
               f"–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–ª–æ–∫–∞—Ö —Ç–µ–±–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –ø–æ–¥—Ö–æ–¥—è—Ç 2 –∏ –±–æ–ª–µ–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ö–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å –æ–±–ª–∞–¥–∞–µ—Ç –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. \n" \
               f"–£ –º–µ–Ω—è –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞, –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n" \
               f"1. –û—Ç–≤–µ—á–∞–π –±—ã—Å—Ç—Ä–æ. –í—ã–±–∏—Ä–∞–π —Ç–æ—Ç –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è —Ç–µ–±–µ —Å–∏–ª—å–Ω–µ–π –≤—Å–µ–≥–æ.\n" \
               f"2. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ. –≠—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ: —Ç–æ–ª—å–∫–æ —Ç–∞–∫ —Ç—ã —É–∑–Ω–∞–µ—à—å —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.\n\n" \
               f"<i>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ </i><b>'–ü–æ–µ—Ö–∞–ª–∏!'</b> <i>–≤–Ω–∏–∑—É</i> üëá"

    if update.callback_query:
        query = update.callback_query
        context.user_data["wish_income"] = query.data
        query.message.delete()
        query.message.reply_text(text=mes_text,
                                 reply_markup=ReplyKeyboardMarkup(reply_key,
                                                                  resize_keyboard=True,
                                                                  one_time_keyboard=True),
                                 parse_mode="HTML"
                                 )
        query.answer()
    else:
        context.user_data["wish_income"] = update.message.text
        update.message.reply_text(text=mes_text,
                                  reply_markup=ReplyKeyboardMarkup(reply_key,
                                                                   resize_keyboard=True,
                                                                   one_time_keyboard=True),
                                  parse_mode="HTML"
                                  )
    return ConversationHandler.END


def q1(update: Update, context: CallbackContext):
    shuffle_q1 = np.random.permutation(q_1)
    answer_btns = []
    for row in shuffle_q1:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])
    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    try:
        db = create_connection(sqlite3)
        cursor = db.cursor()
        sql = f"SELECT * FROM users_table WHERE chat_id = {update.message.chat.id}"
        cursor.execute(sql)
        result = cursor.fetchall()
        db.commit()
        db.close()
        if not result:
            update.message.reply_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è:\n"
                                           "–í–æ–ø—Ä–æ—Å 1 –∏–∑ 12",
                                      reply_markup=inline_keyboad,
                                      parse_mode='HTML')
            return STEP_10
        else:
            update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç.")
        return ConversationHandler.END

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error)


def q2(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer1"] = query.data
    shuffle_q2 = np.random.permutation(q_2)
    answer_btns = []
    for row in shuffle_q2:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è:\n"
                                 "–í–æ–ø—Ä–æ—Å 2 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_11


def q3(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer2"] = query.data
    shuffle_q3 = np.random.permutation(q_3)
    answer_btns = []
    for row in shuffle_q3:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è:\n"
                                 "–í–æ–ø—Ä–æ—Å 3 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_12


def q4(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer3"] = query.data
    shuffle_q4 = np.random.permutation(q_4)
    answer_btns = []
    for row in shuffle_q4:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è:\n"
                                 "–í–æ–ø—Ä–æ—Å 4 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_13


def q5(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer4"] = query.data
    shuffle_q5 = np.random.permutation(q_5)
    answer_btns = []
    for row in shuffle_q5:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è:\n"
                                 "–í–æ–ø—Ä–æ—Å 5 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_14


def q6(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer5"] = query.data
    shuffle_q6 = np.random.permutation(q_6)
    answer_btns = []
    for row in shuffle_q6:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è:\n"
                                 "–í–æ–ø—Ä–æ—Å 6 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_15


def q7(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer6"] = query.data
    shuffle_q7 = np.random.permutation(q_7)
    answer_btns = []
    for row in shuffle_q7:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è:\n"
                                 "–í–æ–ø—Ä–æ—Å 7 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_16


def q8(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer7"] = query.data
    shuffle_q8 = np.random.permutation(q_8)
    answer_btns = []
    for row in shuffle_q8:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è:\n"
                                 "–í–æ–ø—Ä–æ—Å 8 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_17


def q9(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer8"] = query.data
    shuffle_q9 = np.random.permutation(q_9)
    answer_btns = []
    for row in shuffle_q9:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è:\n"
                                 "–í–æ–ø—Ä–æ—Å 9 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_18


def q10(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer9"] = query.data
    shuffle_q10 = np.random.permutation(q_10)
    answer_btns = []
    for row in shuffle_q10:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è:\n"
                                 "–í–æ–ø—Ä–æ—Å 10 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_19


def q11(update: Update, context: CallbackContext):
    query = update.callback_query

    context.user_data["answer10"] = query.data

    shuffle_q11 = np.random.permutation(q_11)
    answer_btns = []
    for row in shuffle_q11:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è:\n"
                                 "–í–æ–ø—Ä–æ—Å 11 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_20


def q12(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer11"] = query.data
    shuffle_q12 = np.random.permutation(q_12)
    answer_btns = []
    for row in shuffle_q12:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è:\n"
                                 "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_21


def final(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer12"] = query.data
    answers = [context.user_data['answer1'],
               context.user_data['answer2'],
               context.user_data['answer3'],
               context.user_data['answer4'],
               context.user_data['answer5'],
               context.user_data['answer6'],
               context.user_data['answer7'],
               context.user_data['answer8'],
               context.user_data['answer9'],
               context.user_data['answer10'],
               context.user_data['answer11'],
               context.user_data['answer12']]

    label_type, a_score, b_score, c_score, d_score, main_label = get_a_type(answers)

    query.message.delete()

    query.message.reply_text(text=get_desc_type(main_label),
                             parse_mode="HTML")
    query.message.reply_text(text='<i>–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≤–æ—é —Å–æ—Ü. —Å–µ—Ç—å </i>üîó',
                             parse_mode="HTML")
    query.answer()
    return GET_SOCIAL_LINK


def get_social_link(update: Update, context: CallbackContext) -> None:
    context.user_data["social_link"] = update.message.text
    update.message.reply_text(text='–°–ø–∞—Å–∏–±–æ! –ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ç–µ—Å—Ç, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ–±–æ –º–Ω–µ –¥—Ä—É–∑—å—è–º –∏ –∫–æ–ª–ª–µ–≥–∞–º ;)',
                              parse_mode="HTML")
    chat_id = update.message.chat.id
    answers = [context.user_data['answer1'],
               context.user_data['answer2'],
               context.user_data['answer3'],
               context.user_data['answer4'],
               context.user_data['answer5'],
               context.user_data['answer6'],
               context.user_data['answer7'],
               context.user_data['answer8'],
               context.user_data['answer9'],
               context.user_data['answer10'],
               context.user_data['answer11'],
               context.user_data['answer12']
               ]

    label_type, a_score, b_score, c_score, d_score, main_label = get_a_type(answers)

    ts = time.localtime()
    date = time.strftime("%d.%m.%y %H:%M", ts)  # 29.01.22 10:40
    data = [context.user_data["name"],
            context.user_data["age"],
            context.user_data["city"],
            context.user_data["social_link"],
            context.user_data["current_income"],
            context.user_data["wish_income"],
            str(answers),
            str(label_type),
            a_score,
            b_score,
            c_score,
            d_score,
            main_label,
            date,
            context.user_data["social_net"]]

    try:
        gc = gspread.service_account(filename='credentials_polbza.json')
        sh = gc.open_by_key(google_sheet_link)
        worksheet = sh.sheet1
        worksheet.append_row(data)
    except Exception as error:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ì—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ", error)

    try:
        db = create_connection(sqlite3)
        cursor = db.cursor()
        sql = f"INSERT INTO users_table(" \
              f"chat_id, name, age, city, social_link, current_income, wish_income, answers," \
              f"label_type, a_score, b_score, c_score, d_score, main_label, date, active, social_net)" \
              f"VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
        cursor.execute(sql, (chat_id,
                             context.user_data["name"],
                             context.user_data["age"],
                             context.user_data["city"],
                             context.user_data["social_link"],
                             context.user_data["current_income"],
                             context.user_data["wish_income"],
                             str(answers), str(label_type), a_score, b_score, c_score, d_score, main_label,
                             date, 1,
                             context.user_data["social_net"],
                             )
                       )
        db.commit()
        db.close()
    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Sqlite", error)

    context.user_data.clear()
    return ConversationHandler.END


def profile_search(update: Update, context: CallbackContext) -> None:
    query = update.inline_query.query
    results = []
    key_word = query.split(":")[1].strip().lower()
    try:
        database = create_connection(sqlite3)
        cursor_key = database.cursor()
        sql_key = f'SELECT chat_id, name, age, city, social_link,' \
                  f'current_income, wish_income, label_type FROM users_table WHERE main_label = ? AND active = 1'
        cursor_key.execute(sql_key, (key_word,))
        records = cursor_key.fetchall()
        if records:
            for row in records:
                keyboad = InlineKeyboardMarkup([
                    [InlineKeyboardButton(text=f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤', callback_data=f'archive.{row[0]}')],
                    [InlineKeyboardButton(text=f'–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –ü—Ä–∏–≤–µ—Ç.', callback_data=f'dialog.{row[0]}')],
                ])
                results.append(
                    InlineQueryResultArticle(id=row[0],
                                             title=f"{row[1]}",
                                             description=f"{key_word}: {row[1]}, {row[2]} –ª–µ—Ç, {row[3]}",
                                             input_message_content=InputTextMessageContent(
                                                 message_text=f"{key_word.upper()}\n\n"
                                                              f"<b>–ò–º—è:</b> {row[1]}\n"
                                                              f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {row[2]}\n"
                                                              f"<b>–ì–æ—Ä–æ–¥:</b> {row[3]}\n"
                                                              f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:</b> {row[4]}\n"
                                                              f"<b>–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥:</b> {row[5]}\n"
                                                              f"<b>–ñ–µ–ª–∞–µ–º—ã–π –¥–æ—Ö–æ–¥:</b> {row[6]}\n\n"
                                                              f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:</b> {row[7]}",
                                                 parse_mode="HTML"
                                             ),
                                             reply_markup=keyboad,
                                             ),
                )
        else:
            results = [InlineQueryResultArticle(id='None',
                                                title=f"{key_word}",
                                                description='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                                                input_message_content=InputTextMessageContent(
                                                    message_text=f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                                                )
                       ]
    except sqlite3.Error as error:
        print("–ü–†–û–ë–õ–ï–ú–ê –° –ó–ê–ë–û–†–û–ú –¢–û–í–ê–†–û–í –ù–ê –°–ö–õ–ê–î–ï", error)

    update.inline_query.answer(results)
    return ConversationHandler.END


def get_a_user(update: Update, context: CallbackContext):
    query = update.callback_query
    current_user_id = query.from_user.id
    user_id = query.data.split('.')[1]
    if 'archive' in query.data:

        try:
            db = create_connection(sqlite3)
            cursor = db.cursor()
            sql1 = f"UPDATE users_table SET active = 0 WHERE chat_id = ? "
            cursor.execute(sql1, (user_id,))
            db.commit()
            db.close()
        except sqlite3.Error as error:
            print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 1", error)

        context.bot.send_message(chat_id=current_user_id, text=f'–ó–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.\n'
                                                               f'–¢–µ–ø–µ—Ä—å –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö',
                                 parse_mode="HTML")
    else:
        context.bot.send_message(chat_id=user_id, text='–ü—Ä–∏–≤–µ—Ç.')
    query.answer()
    return ConversationHandler.END


def dont_know(update: Update, context: CallbackContext):
    update.message.reply_text(text=f'<b>–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è.</b>\n',
                              parse_mode="HTML")
    return ConversationHandler.END


def error(update: Update, context):
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    logging.error(f'–ê–ø–¥–µ–π—Ç {update}, –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏ {context.error}')


def cancel(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    return start(update, context)


def main():
    scheduler = BackgroundScheduler()
    scheduler.add_job(clean_users, 'interval', days=7)
    scheduler.start()
    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))

    if_not_start_str = '(?!^–°—Ç–∞—Ä—Ç)(^.*$)'
    if_start_str = '^(–°—Ç–∞—Ä—Ç)$'

    updater = Updater(tg_bot_token)
    dp = updater.dispatcher
    dp.add_handler(CallbackQueryHandler(get_a_user, pattern='^' + str('.*archive.*|.*dialog.*') + '$'))
    dp.add_handler(InlineQueryHandler(profile_search, pattern='^' + str('.*–ü–æ–∏—Å–∫:.*') + '$'))

    dialog = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('.*–°—Ç–∞—Ä—Ç.*'), name)],
        states={STEP_3: [CommandHandler('start', cancel),MessageHandler(Filters.regex(if_not_start_str), age),
                         ],
                STEP_4: [CommandHandler('start', cancel),MessageHandler(Filters.regex(if_not_start_str), city),

                         ],
                STEP_5: [CommandHandler('start', cancel),MessageHandler(Filters.regex(if_not_start_str), social_link),

                         ],
                STEP_6: [CommandHandler('start', cancel),
                         CallbackQueryHandler(real_income)],
                STEP_7: [CommandHandler('start', cancel),
                         CallbackQueryHandler(wish_income)],
                STEP_8: [CommandHandler('start', cancel),MessageHandler(Filters.regex(if_not_start_str), test_start),
                         CallbackQueryHandler(test_start)]
                },
        fallbacks=[CommandHandler('start', cancel),
                   ConversationHandler.END]
    )

    dp.add_handler(dialog)

    dialog2 = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('.*–ü–æ–µ—Ö–∞–ª–∏.*'), q1)],
        states={STEP_10: [CommandHandler('start', cancel),
                          CallbackQueryHandler(q2, pattern='^' + str('.*a1.*|.*b1.*|.*c1.*|.*d1.*') + '$')],
                STEP_11: [CommandHandler('start', cancel),
                          CallbackQueryHandler(q3, pattern='^' + str('.*a2.*|.*b2.*|.*c2.*|.*d2.*') + '$')],
                STEP_12: [CommandHandler('start', cancel),
                          CallbackQueryHandler(q4, pattern='^' + str('.*a3.*|.*b3.*|.*c3.*|.*d3.*') + '$')],
                STEP_13: [CommandHandler('start', cancel),
                          CallbackQueryHandler(q5, pattern='^' + str('.*a4.*|.*b4.*|.*c4.*|.*d4.*') + '$')],
                STEP_14: [CommandHandler('start', cancel),
                          CallbackQueryHandler(q6, pattern='^' + str('.*a5.*|.*b5.*|.*c5.*|.*d5.*') + '$')],
                STEP_15: [CommandHandler('start', cancel),
                          CallbackQueryHandler(q7, pattern='^' + str('.*a6.*|.*b6.*|.*c6.*|.*d6.*') + '$')],
                STEP_16: [CommandHandler('start', cancel),
                          CallbackQueryHandler(q8, pattern='^' + str('.*a7.*|.*b7.*|.*c7.*|.*d7.*') + '$')],
                STEP_17: [CommandHandler('start', cancel),
                          CallbackQueryHandler(q9, pattern='^' + str('.*a8.*|.*b8.*|.*c8.*|.*d8.*') + '$')],
                STEP_18: [CommandHandler('start', cancel),
                          CallbackQueryHandler(q10, pattern='^' + str('.*a9.*|.*b9.*|.*c9.*|.*d9.*') + '$')],
                STEP_19: [CommandHandler('start', cancel),
                          CallbackQueryHandler(q11, pattern='^' + str('.*a10.*|.*b10.*|.*c10.*|.*d10.*') + '$')],
                STEP_20: [CommandHandler('start', cancel),
                          CallbackQueryHandler(q12, pattern='^' + str('.*a11.*|.*b11.*|.*c11.*|.*d11.*') + '$')],
                STEP_21: [CommandHandler('start', cancel),
                          CallbackQueryHandler(final, pattern='^' + str('.*a12.*|.*b12.*|.*c12.*|.*d12.*') + '$')],
                GET_SOCIAL_LINK: [CommandHandler('start', cancel),
                                  MessageHandler(Filters.regex(if_not_start_str), get_social_link),
                                  ],
                },
        fallbacks=[CommandHandler('start', cancel),
                   ConversationHandler.END],
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END,
        },
    )

    dp.add_handler(dialog2)

    dp.add_handler(MessageHandler(Filters.regex('.*start.*'), start))

    if_not_via = '(?!^–ò–°–ö–ê–¢–ï–õ–¨|–°–û–ó–ò–î–ê–¢–ï–õ–¨|–°–¢–†–ê–¢–ï–ì|–ö–û–ú–ú–£–ù–ò–ö–ê–¢–û–†|–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)(^.*$)'
    dp.add_handler(MessageHandler(Filters.regex(if_not_via), dont_know))

    dp.add_error_handler(error)
    updater.start_polling()

    updater.idle()


if __name__ == '__main__':
    main()
