import time
from datetime import datetime
import os
from apscheduler.schedulers.background import BackgroundScheduler

import numpy as np
import gspread

from additional_functions import clean_users
from combinatios import *
from config import tg_bot_token, google_sheet_link
from conn import create_connection

import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, InlineQueryResultArticle, Update, \
    InputTextMessageContent, ParseMode
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
    ConversationHandler,
    InlineQueryHandler,
    CallbackContext,
)
import logging

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

STEP_2, STEP_3, STEP_4, STEP_5, STEP_6, STEP_7, STEP_8, STEP_9, STEP_10, STEP_11, STEP_12, STEP_13, STEP_14, STEP_15, \
STEP_16, STEP_17, STEP_18, STEP_19, STEP_20, STEP_21 = range(20)


def start(update: Update, context: CallbackContext):
    try:
        db = create_connection(sqlite3)
        cursor = db.cursor()
        sql = f"SELECT * FROM users_table WHERE chat_id = {update.message.chat.id}"
        cursor.execute(sql)
        result = cursor.fetchall()
        db.commit()
        db.close()
        if not result:
            update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≤–µ—Ä—è—é –Ω–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª –Ω–∞ –ø—Å–∏—Ö–æ—Ç–∏–ø. üòé"
                                      f"–ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç, —Ç–æ–≥–¥–∞ —Å–∞–º–æ–µ –≤—Ä–µ–º—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!\n"
                                      f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏ /begin")
        else:
            update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç.")

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error)

    return ConversationHandler.END


def name(update: Update, context: CallbackContext):
    try:
        db = create_connection(sqlite3)
        cursor = db.cursor()
        sql = f"SELECT * FROM users_table WHERE chat_id = {update.message.chat.id}"
        cursor.execute(sql)
        result = cursor.fetchall()
        db.commit()
        db.close()
        if not result:
            update.message.reply_text(f"–ü—Ä–∏—à–ª–∏ —Å–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.\n"
                                      f"–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –°–º–∏—Ä–Ω–æ–≤")
            return STEP_3
        else:
            update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç.")
            return ConversationHandler.END

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error)


def age(update: Update, context: CallbackContext):
    context.user_data["name"] = update.message.text
    update.message.reply_text(f"–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n"
                              f"–ù–∞–ø—Ä–∏–º–µ—Ä: 25")
    return STEP_4


def city(update: Update, context: CallbackContext):
    context.user_data["age"] = update.message.text
    update.message.reply_text(f"–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø—Ä–æ–∂–∏–≤–∞–µ—à—å?\n"
                              f"–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥")
    return STEP_5


def social_link(update: Update, context: CallbackContext):
    context.user_data["city"] = update.message.text
    update.message.reply_text(f"–°–∫–∏–Ω—å —Å—Å—ã–ª–∫—É –Ω–∞ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–æ—Ü.—Å–µ—Ç—è—Ö üôà\n"
                              f"–ù–∞–ø—Ä–∏–º–µ—Ä: vk .com/id00000000")
    return STEP_6


def real_income(update: Update, context: CallbackContext):
    context.user_data["social_link"] = update.message.text
    update.message.reply_text(f"–ö–∞–∫–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ —Å–µ–π—á–∞—Å —É —Ç–µ–±—è (—Ä—É–±/–º–µ—Å)?")
    return STEP_7


def wish_income(update: Update, context: CallbackContext):
    context.user_data["current_income"] = update.message.text
    update.message.reply_text(f"–ñ–µ–ª–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ 1 –≥–æ–¥ (—Ä—É–±/–º–µ—Å)?")
    return STEP_8


def test_start(update: Update, context: CallbackContext):
    context.user_data["wish_income"] = update.message.text
    inline_key = [["–ü–æ–µ—Ö–∞–ª–∏"]]
    update.message.reply_text(f"–û–ö! –ù–∞—á–Ω–µ–º –∂–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!\n"
                              f"–ü–æ–º–Ω–∏, –æ—Ç–≤–µ—á–∞—Ç—å –Ω—É–∂–Ω–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å —á–µ—Å—Ç–Ω–æ –¥–ª—è —Å–µ–±—è üòò\n"
                              f"–í —Ç–µ—Å—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –±–ª–æ–∫–∏ –∫–∞—á–µ—Å—Ç–≤ –ª–∏—á–Ω–æ—Å—Ç–∏.\n"
                              f"–í—ã–±–µ—Ä–∏ –≤ –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–∞–∏–±–æ–ª–µ–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–µ–µ —Ç–µ–±—è.\n"
                              f"–í—Å–µ–≥–æ –±—É–¥–µ—Ç 12 –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
                              f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ '–ü–æ–µ—Ö–∞–ª–∏!' –≤–Ω–∏–∑—É üëá",
                              reply_markup=ReplyKeyboardMarkup(inline_key,
                                                               resize_keyboard=True,
                                                               one_time_keyboard=True),
                              )
    return ConversationHandler.END


def q1(update: Update, context: CallbackContext):
    shuffle_q1 = np.random.permutation(q_1)
    answer_btns = []
    for row in shuffle_q1:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])
    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    try:
        db = create_connection(sqlite3)
        cursor = db.cursor()
        sql = f"SELECT * FROM users_table WHERE chat_id = {update.message.chat.id}"
        cursor.execute(sql)
        result = cursor.fetchall()
        db.commit()
        db.close()
        if not result:
            update.message.reply_text(text="–ß—Ç–æ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è?\n"
                                           "–í–æ–ø—Ä–æ—Å 1 –∏–∑ 12",
                                      reply_markup=inline_keyboad,
                                      parse_mode='HTML')
            return STEP_10
        else:
            update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç.")
        return ConversationHandler.END

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error)


def q2(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer1"] = query.data
    shuffle_q2 = np.random.permutation(q_2)
    answer_btns = []
    for row in shuffle_q2:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–ß—Ç–æ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è?\n"
                                 "–í–æ–ø—Ä–æ—Å 2 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_11


def q3(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer2"] = query.data
    shuffle_q3 = np.random.permutation(q_3)
    answer_btns = []
    for row in shuffle_q3:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–ß—Ç–æ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è?\n"
                                 "–í–æ–ø—Ä–æ—Å 3 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_12


def q4(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer3"] = query.data
    shuffle_q4 = np.random.permutation(q_4)
    answer_btns = []
    for row in shuffle_q4:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–ß—Ç–æ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è?\n"
                                 "–í–æ–ø—Ä–æ—Å 4 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_13


def q5(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer4"] = query.data
    shuffle_q5 = np.random.permutation(q_5)
    answer_btns = []
    for row in shuffle_q5:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–ß—Ç–æ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è?\n"
                                 "–í–æ–ø—Ä–æ—Å 5 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_14


def q6(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer5"] = query.data
    shuffle_q6 = np.random.permutation(q_6)
    answer_btns = []
    for row in shuffle_q6:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–ß—Ç–æ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è?\n"
                                 "–í–æ–ø—Ä–æ—Å 6 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_15


def q7(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer6"] = query.data
    shuffle_q7 = np.random.permutation(q_7)
    answer_btns = []
    for row in shuffle_q7:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–ß—Ç–æ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è?\n"
                                 "–í–æ–ø—Ä–æ—Å 7 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_16


def q8(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer7"] = query.data
    shuffle_q8 = np.random.permutation(q_8)
    answer_btns = []
    for row in shuffle_q8:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–ß—Ç–æ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è?\n"
                                 "–í–æ–ø—Ä–æ—Å 7 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_17


def q9(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer8"] = query.data
    shuffle_q9 = np.random.permutation(q_9)
    answer_btns = []
    for row in shuffle_q9:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–ß—Ç–æ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è?\n"
                                 "–í–æ–ø—Ä–æ—Å 9 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_18


def q10(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer9"] = query.data
    shuffle_q10 = np.random.permutation(q_10)
    answer_btns = []
    for row in shuffle_q10:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–ß—Ç–æ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è?\n"
                                 "–í–æ–ø—Ä–æ—Å 10 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_19


def q11(update: Update, context: CallbackContext):
    query = update.callback_query

    context.user_data["answer10"] = query.data

    shuffle_q11 = np.random.permutation(q_11)
    answer_btns = []
    for row in shuffle_q11:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–ß—Ç–æ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è?\n"
                                 "–í–æ–ø—Ä–æ—Å 11 –∏–∑ 12",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_20


def q12(update: Update, context: CallbackContext):
    query = update.callback_query
    context.user_data["answer11"] = query.data
    shuffle_q12 = np.random.permutation(q_12)
    answer_btns = []
    for row in shuffle_q12:
        answer_btns.append([InlineKeyboardButton(text=f'{row[1]}', callback_data=row[0])])

    inline_keyboad = InlineKeyboardMarkup(answer_btns)
    query.message.edit_text(text="–ß—Ç–æ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–µ–±—è?\n"
                                 "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å",
                            reply_markup=inline_keyboad,
                            parse_mode='HTML')
    return STEP_21


def final(update: Update, context: CallbackContext):
    query = update.callback_query
    chat_id = query.message.chat.id
    context.user_data["answer12"] = query.data
    answers = [context.user_data['answer1'],
               context.user_data['answer2'],
               context.user_data['answer3'],
               context.user_data['answer4'],
               context.user_data['answer5'],
               context.user_data['answer6'],
               context.user_data['answer7'],
               context.user_data['answer8'],
               context.user_data['answer9'],
               context.user_data['answer10'],
               context.user_data['answer11'],
               context.user_data['answer12']]

    label_type, a_score, b_score, c_score, d_score, main_label = get_a_type(answers)
    # url_type = get_url_type(label_type)
    # inline_keyboad = InlineKeyboardMarkup([[InlineKeyboardButton(text=f'–°—Å—ã–ª–∫–∞ üîó', url=url_type)]])
    ts = time.localtime()
    date = time.strftime("%d.%m.%y %H:%M", ts)  # 29.01.22 10:40
    data = [chat_id,
            context.user_data["name"],
            context.user_data["age"],
            context.user_data["city"],
            context.user_data["social_link"],
            context.user_data["current_income"],
            context.user_data["wish_income"],
            str(answers),
            str(label_type),
            a_score,
            b_score,
            c_score,
            d_score,
            main_label,
            date]

    try:
        gc = gspread.service_account(filename='credentials_polbza.json')
        sh = gc.open_by_key(google_sheet_link)
        worksheet = sh.sheet1
        worksheet.append_row(data)
    except Exception as error:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ì—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ", error)

    try:

        db = create_connection(sqlite3)
        cursor = db.cursor()
        sql = f"INSERT INTO users_table(" \
              f"chat_id, name, age, city, social_link, current_income, wish_income, answers," \
              f"label_type, a_score, b_score, c_score, d_score, main_label, date, active)" \
              f"VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
        cursor.execute(sql, (chat_id,
                             context.user_data["name"],
                             context.user_data["age"],
                             context.user_data["city"],
                             context.user_data["social_link"],
                             context.user_data["current_income"],
                             context.user_data["wish_income"],
                             str(answers), str(label_type), a_score, b_score, c_score, d_score, main_label,
                             date, 1,
                             )
                       )
        db.commit()
        db.close()
    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Sqlite", error)

    query.message.delete()
    query.message.reply_text(text=f'–¢–≤–æ–π –ø—Å–∏—Ö–æ—Ç–∏–ø: {label_type}\n',
                             # reply_markup=inline_keyboad,

                             parse_mode="HTML")
    query.answer()
    context.user_data.clear()
    return ConversationHandler.END


def profile_search(update: Update, context: CallbackContext) -> None:
    query = update.inline_query.query
    results = []
    key_word = query.split(":")[1].strip().lower()
    try:
        database = create_connection(sqlite3)
        cursor_key = database.cursor()
        sql_key = f'SELECT chat_id, name, age, city, social_link,' \
                  f'current_income, wish_income, label_type FROM users_table WHERE main_label = ? AND active = 1'
        cursor_key.execute(sql_key, (key_word,))
        records = cursor_key.fetchall()
        if records:
            for row in records:
                keyboad = InlineKeyboardMarkup([
                    [InlineKeyboardButton(text=f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤', callback_data=f'archive.{row[0]}')],
                    [InlineKeyboardButton(text=f'–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –ü—Ä–∏–≤–µ—Ç.', callback_data=f'dialog.{row[0]}')],
                ])
                results.append(
                    InlineQueryResultArticle(id=row[0],
                                             title=f"{row[1]}",
                                             description=f"{key_word}: {row[1]}, {row[2]} –ª–µ—Ç, {row[3]}",
                                             input_message_content=InputTextMessageContent(
                                                 message_text=f"{key_word.upper()}\n\n"
                                                              f"<b>–ò–º—è:</b> {row[1]}\n"
                                                              f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {row[2]}\n"
                                                              f"<b>–ì–æ—Ä–æ–¥:</b> {row[3]}\n"
                                                              f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:</b> {row[4]}\n"
                                                              f"<b>–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥:</b> {row[5]}\n"
                                                              f"<b>–ñ–µ–ª–∞–µ–º—ã–π –¥–æ—Ö–æ–¥:</b> {row[6]}\n\n"
                                                              f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:</b> {row[7]}",
                                                 parse_mode="HTML"
                                             ),
                                             reply_markup=keyboad,
                                             ),
                )
        else:
            results = [InlineQueryResultArticle(id='None',
                                                title=f"{key_word}",
                                                description='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                                                input_message_content=InputTextMessageContent(
                                                                        message_text=f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                                                )
                       ]
    except sqlite3.Error as error:
        print("–ü–†–û–ë–õ–ï–ú–ê –° –ó–ê–ë–û–†–û–ú –¢–û–í–ê–†–û–í –ù–ê –°–ö–õ–ê–î–ï", error)

    update.inline_query.answer(results)
    return ConversationHandler.END


def get_a_user(update: Update, context: CallbackContext):
    query = update.callback_query
    current_user_id = query.from_user.id
    user_id = query.data.split('.')[1]
    if 'archive' in query.data:

        try:
            db = create_connection(sqlite3)
            cursor = db.cursor()
            sql1 = f"UPDATE users_table SET active = 0 WHERE chat_id = ? "
            cursor.execute(sql1, (user_id,))
            db.commit()
            db.close()
        except sqlite3.Error as error:
            print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 1", error)

        context.bot.send_message(chat_id=current_user_id, text=f'–ó–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.\n'
                                                               f'–¢–µ–ø–µ—Ä—å –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö',
                                 parse_mode="HTML")
    else:
        context.bot.send_message(chat_id=user_id, text='–ü—Ä–∏–≤–µ—Ç.')
    query.answer()
    return ConversationHandler.END


def dont_know(update: Update, context: CallbackContext):
    update.message.reply_text(text=f'<b>–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è.</b>\n',
                              parse_mode="HTML")
    return ConversationHandler.END


def error(update: Update, context):
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    logging.error(f'–ê–ø–¥–µ–π—Ç {update}, –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏ {context.error}')


def main():
    scheduler = BackgroundScheduler()
    scheduler.add_job(clean_users, 'interval', days=7)
    scheduler.start()
    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))

    updater = Updater(tg_bot_token)
    dp = updater.dispatcher
    dp.add_handler(CallbackQueryHandler(get_a_user, pattern='^' + str('.*archive.*|.*dialog.*') + '$'))
    dp.add_handler(InlineQueryHandler(profile_search, pattern='^' + str('.*–ü–æ–∏—Å–∫:.*') + '$'))
    dp.add_handler(MessageHandler(Filters.regex('.*start.*'), start))

    dialog = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('.*begin.*'), name)],
        states={STEP_3: [MessageHandler(Filters.text, age)],
                STEP_4: [MessageHandler(Filters.text, city)],
                STEP_5: [MessageHandler(Filters.text, social_link)],
                STEP_6: [MessageHandler(Filters.text, real_income)],
                STEP_7: [MessageHandler(Filters.text, wish_income)],
                STEP_8: [MessageHandler(Filters.text, test_start)]
                },
        fallbacks=[ConversationHandler.END]
    )

    dialog2 = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('.*–ü–æ–µ—Ö–∞–ª–∏.*'), q1)],
        states={STEP_10: [CallbackQueryHandler(q2, pattern='^' + str('.*a1.*|.*b1.*|.*c1.*|.*d1.*') + '$')],
                STEP_11: [CallbackQueryHandler(q3, pattern='^' + str('.*a2.*|.*b2.*|.*c2.*|.*d2.*') + '$')],
                STEP_12: [CallbackQueryHandler(q4, pattern='^' + str('.*a3.*|.*b3.*|.*c3.*|.*d3.*') + '$')],
                STEP_13: [CallbackQueryHandler(q5, pattern='^' + str('.*a4.*|.*b4.*|.*c4.*|.*d4.*') + '$')],
                STEP_14: [CallbackQueryHandler(q6, pattern='^' + str('.*a5.*|.*b5.*|.*c5.*|.*d5.*') + '$')],
                STEP_15: [CallbackQueryHandler(q7, pattern='^' + str('.*a6.*|.*b6.*|.*c6.*|.*d6.*') + '$')],
                STEP_16: [CallbackQueryHandler(q8, pattern='^' + str('.*a7.*|.*b7.*|.*c7.*|.*d7.*') + '$')],
                STEP_17: [CallbackQueryHandler(q9, pattern='^' + str('.*a8.*|.*b8.*|.*c8.*|.*d8.*') + '$')],
                STEP_18: [CallbackQueryHandler(q10, pattern='^' + str('.*a9.*|.*b9.*|.*c9.*|.*d9.*') + '$')],
                STEP_19: [CallbackQueryHandler(q11, pattern='^' + str('.*a10.*|.*b10.*|.*c10.*|.*d10.*') + '$')],
                STEP_20: [CallbackQueryHandler(q12, pattern='^' + str('.*a11.*|.*b11.*|.*c11.*|.*d11.*') + '$')],
                STEP_21: [CallbackQueryHandler(final, pattern='^' + str('.*a12.*|.*b12.*|.*c12.*|.*d12.*') + '$')],
                },
        fallbacks=[ConversationHandler.END]
    )
    dp.add_handler(dialog)
    dp.add_handler(dialog2)

    if_not_via = '(?!^–ò–°–ö–ê–¢–ï–õ–¨|–°–û–ó–ò–î–ê–¢–ï–õ–¨|–°–¢–†–ê–¢–ï–ì|–ö–û–ú–ú–£–ù–ò–ö–ê–¢–û–†|–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)(^.*$)'
    dp.add_handler(MessageHandler(Filters.regex(if_not_via), dont_know))

    dp.add_error_handler(error)
    updater.start_polling()

    updater.idle()


if __name__ == '__main__':
    main()
